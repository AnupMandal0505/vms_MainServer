version: '3.8'

services:
  db:
    image: postgres:15
    container_name: casemfc_postgres
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      retries: 5
    volumes:
      - vms_postgres_data:/var/lib/postgresql/data
      - db_backup:/backup
    expose:
      - "5432"

  redis:
    image: redis:alpine
    container_name: casemfc_redis
    restart: always
    command: redis-server --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 5s
      retries: 5
    volumes:
      - vms_redis_data:/data
    expose:
      - "6379"

  web:
    build:
      context: .
      dockerfile: Dockerfile
    deploy:
      mode: replicated
      replicas: 2
    restart: always
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
    volumes:
      - .:/vms
      - static_vms:/vms/staticfiles
      - media_vms:/vms/media
    # expose:
    #   - "8000"
    # ports:
    #   - "8000:8000"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.web.rule=Host(`casemfc.com`)"
      - "traefik.http.services.web.loadbalancer.server.port=8000"
      - "traefik.http.routers.web.entrypoints=websecure"
      - "traefik.http.routers.web.tls.certresolver=myresolver"


  msgbroker:
    image: "rabbitmq:management"
    restart: always  
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq

  # celery:
  #   build: .
  #   command: celery -A core_vms worker --loglevel=info
  #   working_dir: /vms
  #   volumes:
  #     - .:/vms
  #   depends_on:
  #     - msgbroker
  #     - web

  # nginx:
  #   image: nginx:latest
  #   container_name: nginx_proxy
  #   restart: always
  #   ports:
  #     - "80:80"
  #   volumes:
  #     - "./nginx/nginx.conf:/etc/nginx/nginx.conf"
  #     - static_vms:/vms/staticfiles
  #     - media_vms:/vms/media
  #   depends_on:
  #     - web


volumes:
  letsencrypt:
  vms_postgres_data:
  vms_redis_data:
  static_vms:
  media_vms:
  db_backup:
  rabbitmq_data:   
